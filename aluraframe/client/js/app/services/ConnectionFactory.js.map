{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objetctStoresNames","contains","store","deleteObjetctStore","createObjectStore","autoIncremet"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEqB;AAClB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAI,CAAChB,UAAL,EAAiB;AACbA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAY;AAC3B,8CAAM,IAAIE,KAAJ,CAAU,8CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AAEH,6BAVD;;AAYAO,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBAvBM,CAAP;AAwBH;;;iDAEmBtB,U,EAAW;;AAE3BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAIvB,WAAWwB,kBAAX,CAA8BC,QAA9B,CAAuCC,KAAvC,CAAJ,EAAmD;AAC/C1B,2CAAW2B,kBAAX,CAA8BD,KAA9B;AACH;;AAED1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC;AAChCG,8CAAc;AADkB,6BAApC;AAGH,yBARD;AASH;;;uDAEwB;AACrB,4BAAG7B,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nconst version = 4;\r\nconst dbName = 'aluraframe';\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory{\r\n    \r\n    constructor(){\r\n        throw new Error(\"Não é possível criar instancia de Connection Factory\");\r\n    }\r\n\r\n    static getConnection(){\r\n        return new Promise((resolve, reject) =>{\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n                ConnectionFactory._createStore(e.target.result);\r\n            };\r\n            \r\n            openRequest.onsuccess = e => {\r\n                if (!connection) {\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function () {\r\n                        throw new Error(\"Você não pode fechar uma conexão diretamente\");\r\n                    };\r\n                }\r\n                resolve(connection);\r\n                \r\n            };\r\n            \r\n            openRequest.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject(e.target.error.name);\r\n            };\r\n        });\r\n    }\r\n    \r\n    static _createStore(connection){\r\n        \r\n        stores.forEach(store => {\r\n            if (connection.objetctStoresNames.contains(store)) {\r\n                connection.deleteObjetctStore(store);\r\n            }\r\n    \r\n            connection.createObjectStore(store, {\r\n                autoIncremet: true,\r\n            });\r\n        });\r\n    }\r\n\r\n    static _closeConnection(){\r\n        if(connection){\r\n            close();\r\n            connection = null;\r\n        }\r\n    }\r\n}\r\n"]}